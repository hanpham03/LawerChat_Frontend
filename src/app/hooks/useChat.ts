import { useEffect, useState } from "react";
import {
  getChatSessions,
  getMessages,
  sendMessageToAPI,
  startNewChatSession,
  deleteChatSessionAPI,
  deleteChatbotUser,
} from "@/app/utils/api";
import { useAuth } from "@/app/hooks/useAuth";
import { useSearchParams } from "next/navigation";

export function useChat() {
  const { userId, token } = useAuth();
  const searchParams = useSearchParams();
  const [chatbotId, setChatbotId] = useState<string | null>(null);

  const [chatSessions, setChatSessions] = useState<any[]>([]);
  const [selectedSession, setSelectedSession] = useState<number | null>(null);
  const [messages, setMessages] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  // üîπ C·∫≠p nh·∫≠t chatbotId khi URL thay ƒë·ªïi
  useEffect(() => {
    setChatbotId(searchParams.get("chatbotId"));
  }, [searchParams]);

  // üîπ Ch·ªâ l·∫•y phi√™n chat c·ªßa chatbot hi·ªán t·∫°i
  useEffect(() => {
    if (!userId || !token || !chatbotId) return;

    getChatSessions(userId, token, chatbotId)
      .then((sessions) => {
        setChatSessions([...sessions]); // ‚úÖ Sao ch√©p m·∫£ng ƒë·ªÉ ƒë·∫£m b·∫£o re-render
      })
      .catch((error) => console.error("L·ªói l·∫•y danh s√°ch phi√™n chat:", error));
  }, [userId, token, chatbotId]);

  // üîπ Khi danh s√°ch phi√™n chat thay ƒë·ªïi, ch·ªçn phi√™n m·ªõi nh·∫•t
  useEffect(() => {
    if (chatSessions.length > 0) {
      // üîπ Ch·ªçn phi√™n chat c√≥ ID l·ªõn nh·∫•t (m·ªõi nh·∫•t)
      const latestSession = chatSessions.reduce((prev, curr) =>
        prev.id > curr.id ? prev : curr
      );
      setSelectedSession(latestSession.id);
    }
  }, [chatSessions]);

  // üîπ Khi ch·ªçn phi√™n chat, t·∫£i tin nh·∫Øn t∆∞∆°ng ·ª©ng
  useEffect(() => {
    if (!selectedSession || !token) return;

    getMessages(selectedSession, token)
      .then(setMessages)
      .catch((error) => console.error("L·ªói l·∫•y tin nh·∫Øn:", error));
  }, [selectedSession, token]);

  // ‚úâÔ∏è G·ª≠i tin nh·∫Øn
  const sendMessage = async (text: string, dify_chatbot_id?: string) => {
    let sessionId = selectedSession;

    if (!sessionId) {
      sessionId = await startNewChatSession(userId, token, chatbotId);
      if (!sessionId) return;
      setSelectedSession(sessionId);
    }

    setMessages((prev) => [...prev, { text, role: "user" }]);
    setIsLoading(true);

    try {
      console.log("üì§ G·ª≠i tin nh·∫Øn:", text);
      console.log("üìå dify_chatbot_id:", dify_chatbot_id);

      const botResponse = await sendMessageToAPI(
        sessionId,
        text,
        token,
        "user",
        dify_chatbot_id || chatbotId // ‚úÖ N·∫øu kh√¥ng c√≥ `dify_chatbot_id`, d√πng `chatbotId`
      );

      if (botResponse) {
        setMessages((prev) => [
          ...prev,
          { text: botResponse, role: "assistant" },
        ]);
        await sendMessageToAPI(sessionId, botResponse, token, "assistant");
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi g·ª≠i tin nh·∫Øn:", error);
    }

    setIsLoading(false);
  };

  // ‚ûï Th√™m phi√™n chat m·ªõi
  const addNewChatSession = async () => {
    if (!userId || !token || !chatbotId) {
      alert("‚ùå Thi·∫øu th√¥ng tin ƒë·ªÉ t·∫°o phi√™n chat m·ªõi.");
      return;
    }

    const sessionId = await startNewChatSession(userId, token, chatbotId);
    if (!sessionId) return;

    const newSession = {
      id: sessionId,
      chatbot_id: chatbotId,
      user_id: userId,
      start_time: new Date().toISOString(),
    };

    // ‚úÖ C·∫≠p nh·∫≠t state ngay l·∫≠p t·ª©c
    setChatSessions((prev) => [newSession, ...prev]);
    setSelectedSession(sessionId);

    // ‚úÖ G·ªçi API ƒë·ªÉ ƒë·ªìng b·ªô danh s√°ch chat m·ªõi nh·∫•t
    try {
      const updatedSessions = await getChatSessions(userId, token, chatbotId);
      setChatSessions(updatedSessions);
    } catch (error) {
      console.error("L·ªói c·∫≠p nh·∫≠t danh s√°ch phi√™n chat:", error);
    }
  };

  // ‚ùå X√≥a phi√™n chat
  const deleteChatSession = async (sessionId: number) => {
    if (!token) return;

    setChatSessions((prevSessions) => {
      const updatedSessions = prevSessions.filter((s) => s.id !== sessionId);

      if (selectedSession === sessionId) {
        setSelectedSession(
          updatedSessions.length > 0 ? updatedSessions[0].id : null
        );
      }

      return [...updatedSessions]; // ‚úÖ Sao ch√©p m·∫£ng ƒë·ªÉ React nh·∫≠n ra thay ƒë·ªïi
    });

    try {
      await deleteChatSessionAPI(sessionId, token);
      console.log(`‚úÖ X√≥a session ${sessionId} th√†nh c√¥ng!`);
    } catch (error) {
      console.error("L·ªói x√≥a phi√™n chat:", error);
    }
  };

  // reset messages
  const resetMessages = () => {
    setMessages([]);
  };

  const deleteChatbot = async (
    chatbotId: number,
    dify_chatbot_id: string,
    token: string
  ) => {
    if (!chatbotId || !dify_chatbot_id || !token) {
      console.error("‚ùå Thi·∫øu th√¥ng tin ƒë·ªÉ x√≥a chatbot.");
      return;
    }

    try {
      // G·ªçi API ƒë·ªÉ x√≥a chatbot
      const response = await deleteChatbotUser(
        chatbotId,
        dify_chatbot_id,
        token
      );

      if (response?.message === "Chatbot deleted successfully") {
        console.log(`‚úÖ Chatbot ${chatbotId} ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`);

        // C·∫≠p nh·∫≠t l·∫°i danh s√°ch chatbot sau khi x√≥a
        setChatSessions((prevSessions) =>
          prevSessions.filter((s) => s.chatbot_id !== chatbotId)
        );

        // N·∫øu chatbot b·ªã x√≥a l√† chatbot ƒëang ƒë∆∞·ª£c ch·ªçn, reset state
        if (chatbotId === selectedSession) {
          setSelectedSession(null);
          setMessages([]);
        }
      } else {
        console.error("‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a chatbot:", response);
      }
    } catch (error) {
      console.error("üö® L·ªói khi x√≥a chatbot:", error);
    }
  };

  return {
    messages,
    chatSessions,
    selectedSession,
    isLoading,
    sendMessage,
    selectChatSession: setSelectedSession,
    addNewChatSession,
    deleteChatSession,
    resetMessages,
    deleteChatbot,
  };
}

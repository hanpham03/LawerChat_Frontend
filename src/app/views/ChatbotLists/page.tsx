"use client";
import { useState, useEffect } from "react";
import { jwtDecode } from "jwt-decode";
import { Plus, Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { useRouter } from "next/navigation";
import { getSessionByChatbotId, startNewChatSession } from "@/app/utils/api";
import { useChat } from "@/app/hooks/useChat";

interface Chatbot {
  id: number;
  name: string;
  description?: string;
}

interface DecodedToken {
  user_id: string; // Ho·∫∑c s·ªë, t√πy v√†o server tr·∫£ v·ªÅ ki·ªÉu g√¨
}

export default function ChatbotList() {
  const [chatbots, setChatbots] = useState<Chatbot[]>([]);
  const [userId, setUserId] = useState<string | null>(null);
  const [difyToken, setDifyToken] = useState<string | null>(null);
  const [authToken, setAuthToken] = useState<string | null>(null);
  const [listChatbot, setListChatbot] = useState<any[]>([]);
  const router = useRouter();
  const { deleteChatbot } = useChat();

  // L·∫•y user_id t·ª´ token trong localStorage
  useEffect(() => {
    // l·∫•y dify token
    const difyToken = localStorage.getItem("dify_token");
    if (!difyToken) {
      console.error("Kh√¥ng t√¨m th·∫•y difyToken trong localStorage!");
      return;
    } else {
      setDifyToken(difyToken);
    }
    // l·∫•y website token
    const token = localStorage.getItem("token");
    setAuthToken(token);
    if (token) {
      try {
        const decoded: DecodedToken = jwtDecode(token);
        setUserId(decoded.id);
      } catch (error) {
        console.error("L·ªói khi gi·∫£i m√£ token:", error);
      }
    }
  }, []);

  // g·ªçi api l·∫•y t·∫•t c·∫£ chatbot hi·ªán t·∫°i trong dify, ƒë·ªÉ nh·∫≠n v·ªÅ 1 m·∫£ng g·ªìm id v√† name
  useEffect(() => {
    const fetchChatbotsDify = async () => {
      if (!difyToken) return; // Tr√°nh g·ªçi API khi ch∆∞a c√≥ token

      try {
        const response = await fetch(
          "http://localhost:3001/api/chatbots/getAllChatbotDify",
          {
            headers: {
              Authorization: `Bearer ${difyToken}`,
            },
            method: "GET",
          }
        );

        if (!response.ok) {
          throw new Error(`Failed to fetch chatbots: ${response.statusText}`);
        }

        const data = await response.json();

        if (!Array.isArray(data)) {
          throw new Error("D·ªØ li·ªáu API kh√¥ng ph·∫£i l√† m·ªôt m·∫£ng!");
        }

        setListChatbot(data);
      } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch chatbot Dify:", error);
      }
    };

    fetchChatbotsDify();
  }, [difyToken]);

  // G·ªçi API l·∫•y t·∫•t c·∫£ chatbot c·ªßa m·ªôt user
  useEffect(() => {
    if (!userId) return;

    const fetchChatbots = async () => {
      try {
        const response = await fetch(
          `http://localhost:3001/api/chatbots/user/${userId}`,
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
            method: "GET",
          }
        );
        if (!response.ok) {
          throw new Error("Failed to fetch chatbots");
        }
        const data: Chatbot[] = await response.json();
        setChatbots(data);
      } catch (error) {
        console.error("Error fetching chatbots:", error);
      }
    };

    fetchChatbots();
  }, [userId]);

  const handleAddChatbot = () => {
    router.push("./ChatbotCreate"); // ƒêi·ªÅu h∆∞·ªõng ƒë·∫øn trang t·∫°o chatbot
  };

  const removeChatbot = async (chatbotId: number, dify_chatbot_id: string) => {
    try {
      const dify_token = localStorage.getItem("dify_token");
      const token = localStorage.getItem("token");

      if (!dify_token || !token) {
        console.error("‚ùå Kh√¥ng t√¨m th·∫•y token!");
        return;
      }

      // G·ªçi API ƒë·ªÉ x√≥a chatbot
      await deleteChatbot(chatbotId, dify_chatbot_id, token);

      // C·∫≠p nh·∫≠t danh s√°ch chatbot sau khi x√≥a
      setChatbots((prevChatbots) =>
        prevChatbots.filter((bot) => bot.id !== chatbotId)
      );
    } catch (error) {
      console.error("üö® L·ªói khi x√≥a chatbot:", error);
    }
  };

  const handleChatbotClick = async (chatbotId: number) => {
    try {
      // üìå L·∫•y token t·ª´ localStorage
      const token = localStorage.getItem("token");
      if (!token) throw new Error("Kh√¥ng t√¨m th·∫•y token!");
      const dify_token = localStorage.getItem("dify_token");
      if (!dify_token) throw new Error("Kh√¥ng t√¨m th·∫•y dify token!");

      // ‚úÖ Gi·∫£i m√£ token ƒë·ªÉ l·∫•y user_id
      const decoded = jwtDecode(token);
      const userId = decoded?.id; // üëâ ID c·ªßa user t·ª´ token

      if (!userId) throw new Error("Kh√¥ng t√¨m th·∫•y user_id!");

      // üìå L·∫•y danh s√°ch phi√™n chat c·ªßa chatbot n√†y
      const sessions = await getSessionByChatbotId(chatbotId, userId, token);

      let selectedSessionId = null;

      if (sessions.length > 0) {
        // ‚úÖ Ch·ªçn phi√™n chat c√≥ ID l·ªõn nh·∫•t c·ªßa chatbot n√†y
        selectedSessionId = Math.max(...sessions.map((s) => s.id));
      } else {
        // üîπ N·∫øu kh√¥ng c√≥ phi√™n n√†o, t·∫°o m·ªõi
        selectedSessionId = await startNewChatSession(userId, token, chatbotId);
      }

      if (!selectedSessionId) throw new Error("L·ªói khi ch·ªçn phi√™n chat");

      // üìå Chuy·ªÉn h∆∞·ªõng ƒë·∫øn Home v·ªõi chatbotId & phi√™n chat ƒë√£ ch·ªçn
      router.push(
        `/views/home?chatbotId=${chatbotId}&sessionId=${selectedSessionId}`
      );
    } catch (error) {
      console.error("L·ªói khi ch·ªçn chatbot:", error);
    }
  };

  // L·ªçc danh s√°ch chatbot hi·ªÉn th·ªã
  const filteredChatbots = chatbots.filter((bot) =>
    listChatbot.some((difyBot) => difyBot.id === bot.dify_chatbot_id)
  );

  return (
    <div className="w-full mx-auto p-6 bg-white shadow-xl rounded-xl border border-gray-200">
      <h2 className="text-2xl font-bold text-gray-700 mb-4 text-center">
        üìú Danh s√°ch Chatbot
      </h2>

      {!userId ? (
        <p className="text-center text-red-500">
          Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng!
        </p>
      ) : (
        <>
          {filteredChatbots.length === 0 ? (
            <div className="text-center py-10">
              <p className="text-xl text-gray-600 mb-6">
                Ch∆∞a c√≥ chatbot n√†o ƒë∆∞·ª£c t·∫°o, h√£y t·∫°o chatbot m·ªõi ƒë·ªÉ chat v·ªõi
                ch√∫ng t√¥i ngay!
              </p>
              <div className="flex justify-center">
                <Button
                  onClick={handleAddChatbot}
                  className="flex items-center gap-2 text-lg px-6 py-3 bg-green-500 hover:bg-green-600 transition-all shadow-lg"
                >
                  <Plus className="w-6 h-6" /> Th√™m Chatbot
                </Button>
              </div>
            </div>
          ) : (
            <>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-4">
                {filteredChatbots.map((bot) => (
                  <Card
                    key={bot.id}
                    className="min-w-[250px] h-[200px] flex flex-col items-center justify-center shadow-lg border rounded-lg cursor-pointer hover:bg-gray-100 transition"
                    onClick={() => handleChatbotClick(bot.id)}
                  >
                    <CardContent className="text-xl font-semibold text-center">
                      ü§ñ {bot.name}
                    </CardContent>
                    <CardContent className="text-sm font-semibold text-center">
                      {bot.description}
                    </CardContent>
                    <Button
                      variant="destructive"
                      size="lg"
                      className="mt-4"
                      onClick={async (e) => {
                        e.stopPropagation(); // NgƒÉn ch·∫∑n s·ª± ki·ªán click v√†o Card
                        await removeChatbot(bot.id, bot.dify_chatbot_id); // G·ªçi h√†m x√≥a
                      }}
                    >
                      <Trash2 className="w-6 h-6" />
                    </Button>
                  </Card>
                ))}
              </div>

              <div className="mt-4 flex justify-center">
                <Button
                  onClick={handleAddChatbot}
                  className="flex items-center gap-2 text-lg px-6 py-3 bg-green-500 hover:bg-green-600 transition-all shadow-lg"
                >
                  <Plus className="w-6 h-6" /> Th√™m Chatbot
                </Button>
              </div>
            </>
          )}
        </>
      )}
    </div>
  );
}
